//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/MultiplayerPhoton/PlaneGame/MapInput/PlayersController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayersController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayersController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayersController"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""5b2a3c21-7c5f-4677-b1db-23c1909dda3c"",
            ""actions"": [
                {
                    ""name"": ""PlayerPC"",
                    ""type"": ""Value"",
                    ""id"": ""aeb44421-ffae-4d67-b724-7e302cd75ddb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlayerJoystick"",
                    ""type"": ""Value"",
                    ""id"": ""e3cdfd40-0463-42b4-a368-40168aefa1dd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c54644f4-54a4-4c50-b898-dc156cbe3347"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerPC"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8c1647ee-c361-4b20-9ab1-da90f57403b1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerPC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""502e2df4-ff50-4c51-b371-681d580ead6b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerPC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e2458b61-7a99-4da7-917f-bbcf8859b329"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerPC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f32549e9-b5e8-4053-92c7-f2ca97ee8599"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerPC"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cdaff9d1-b57e-43ec-9eba-42947654986c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerJoystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player2"",
            ""id"": ""25fa1130-8c69-46aa-9b19-d5cb89ba62d4"",
            ""actions"": [
                {
                    ""name"": ""PlayerJoystick"",
                    ""type"": ""Value"",
                    ""id"": ""7328a133-9582-4e0a-a0a7-832ae7e388c6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ae253ba3-3e37-4a1d-891f-f23faabc8471"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerJoystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": []
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_PlayerPC = m_Player.FindAction("PlayerPC", throwIfNotFound: true);
        m_Player_PlayerJoystick = m_Player.FindAction("PlayerJoystick", throwIfNotFound: true);
        // Player2
        m_Player2 = asset.FindActionMap("Player2", throwIfNotFound: true);
        m_Player2_PlayerJoystick = m_Player2.FindAction("PlayerJoystick", throwIfNotFound: true);
    }

    ~@PlayersController()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, PlayersController.Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Player2.enabled, "This will cause a leak and performance issues, PlayersController.Player2.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_PlayerPC;
    private readonly InputAction m_Player_PlayerJoystick;
    public struct PlayerActions
    {
        private @PlayersController m_Wrapper;
        public PlayerActions(@PlayersController wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerPC => m_Wrapper.m_Player_PlayerPC;
        public InputAction @PlayerJoystick => m_Wrapper.m_Player_PlayerJoystick;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @PlayerPC.started += instance.OnPlayerPC;
            @PlayerPC.performed += instance.OnPlayerPC;
            @PlayerPC.canceled += instance.OnPlayerPC;
            @PlayerJoystick.started += instance.OnPlayerJoystick;
            @PlayerJoystick.performed += instance.OnPlayerJoystick;
            @PlayerJoystick.canceled += instance.OnPlayerJoystick;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @PlayerPC.started -= instance.OnPlayerPC;
            @PlayerPC.performed -= instance.OnPlayerPC;
            @PlayerPC.canceled -= instance.OnPlayerPC;
            @PlayerJoystick.started -= instance.OnPlayerJoystick;
            @PlayerJoystick.performed -= instance.OnPlayerJoystick;
            @PlayerJoystick.canceled -= instance.OnPlayerJoystick;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Player2
    private readonly InputActionMap m_Player2;
    private List<IPlayer2Actions> m_Player2ActionsCallbackInterfaces = new List<IPlayer2Actions>();
    private readonly InputAction m_Player2_PlayerJoystick;
    public struct Player2Actions
    {
        private @PlayersController m_Wrapper;
        public Player2Actions(@PlayersController wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerJoystick => m_Wrapper.m_Player2_PlayerJoystick;
        public InputActionMap Get() { return m_Wrapper.m_Player2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player2Actions set) { return set.Get(); }
        public void AddCallbacks(IPlayer2Actions instance)
        {
            if (instance == null || m_Wrapper.m_Player2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player2ActionsCallbackInterfaces.Add(instance);
            @PlayerJoystick.started += instance.OnPlayerJoystick;
            @PlayerJoystick.performed += instance.OnPlayerJoystick;
            @PlayerJoystick.canceled += instance.OnPlayerJoystick;
        }

        private void UnregisterCallbacks(IPlayer2Actions instance)
        {
            @PlayerJoystick.started -= instance.OnPlayerJoystick;
            @PlayerJoystick.performed -= instance.OnPlayerJoystick;
            @PlayerJoystick.canceled -= instance.OnPlayerJoystick;
        }

        public void RemoveCallbacks(IPlayer2Actions instance)
        {
            if (m_Wrapper.m_Player2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer2Actions instance)
        {
            foreach (var item in m_Wrapper.m_Player2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player2Actions @Player2 => new Player2Actions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnPlayerPC(InputAction.CallbackContext context);
        void OnPlayerJoystick(InputAction.CallbackContext context);
    }
    public interface IPlayer2Actions
    {
        void OnPlayerJoystick(InputAction.CallbackContext context);
    }
}
