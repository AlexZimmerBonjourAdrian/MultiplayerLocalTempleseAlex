//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Completed-Game/InputAction/CInputSystemMultiplayer.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CInputSystemMultiplayer: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CInputSystemMultiplayer()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CInputSystemMultiplayer"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""6b1feb08-11df-40f7-9463-b31c77ac71fe"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""2bafd5de-5be6-4366-a09f-9a0bfbafdef5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f4bd8882-74c2-465f-8ca5-d269efdf4c7a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC Controller Schema;Xbox Controller - Player 2;Xbox Controller - Player 3;Xbox Controller - Player 4"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC Controller Schema"",
            ""bindingGroup"": ""PC Controller Schema"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Xbox Controller - Player 2"",
            ""bindingGroup"": ""Xbox Controller - Player 2"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Xbox Controller - Player 3"",
            ""bindingGroup"": ""Xbox Controller - Player 3"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Xbox Controller - Player 4"",
            ""bindingGroup"": ""Xbox Controller - Player 4"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    public struct PlayerActions
    {
        private @CInputSystemMultiplayer m_Wrapper;
        public PlayerActions(@CInputSystemMultiplayer wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_PCControllerSchemaSchemeIndex = -1;
    public InputControlScheme PCControllerSchemaScheme
    {
        get
        {
            if (m_PCControllerSchemaSchemeIndex == -1) m_PCControllerSchemaSchemeIndex = asset.FindControlSchemeIndex("PC Controller Schema");
            return asset.controlSchemes[m_PCControllerSchemaSchemeIndex];
        }
    }
    private int m_XboxControllerPlayer2SchemeIndex = -1;
    public InputControlScheme XboxControllerPlayer2Scheme
    {
        get
        {
            if (m_XboxControllerPlayer2SchemeIndex == -1) m_XboxControllerPlayer2SchemeIndex = asset.FindControlSchemeIndex("Xbox Controller - Player 2");
            return asset.controlSchemes[m_XboxControllerPlayer2SchemeIndex];
        }
    }
    private int m_XboxControllerPlayer3SchemeIndex = -1;
    public InputControlScheme XboxControllerPlayer3Scheme
    {
        get
        {
            if (m_XboxControllerPlayer3SchemeIndex == -1) m_XboxControllerPlayer3SchemeIndex = asset.FindControlSchemeIndex("Xbox Controller - Player 3");
            return asset.controlSchemes[m_XboxControllerPlayer3SchemeIndex];
        }
    }
    private int m_XboxControllerPlayer4SchemeIndex = -1;
    public InputControlScheme XboxControllerPlayer4Scheme
    {
        get
        {
            if (m_XboxControllerPlayer4SchemeIndex == -1) m_XboxControllerPlayer4SchemeIndex = asset.FindControlSchemeIndex("Xbox Controller - Player 4");
            return asset.controlSchemes[m_XboxControllerPlayer4SchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
